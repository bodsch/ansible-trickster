[main]
# instance_id allows you to run multiple trickster processes on the same host and log to separate files
# Useful for baremetal, not so much for elastic deployments, so only uncomment if you really need it
# default is 0, which means ignored
#instance_id = 0

# Configuration options for the Proxy Server
[proxy_server]

# listen_port defines the port on which Trickster's Front-end HTTP Proxy server listens.
# The default proxy is for Prometheus, so we use 9090 by default, just like Prometheus does
listen_port = {{trickster_proxy_server_listen_port}}

# listen_address defines the ip on which Trickster's Front-end HTTP Proxy server listens.
# empty by default, listening on all interfaces
# listen_address = '{{trickster_proxy_server_listen_address}}'

# tls_listen_port defines the port on which Trickster's Front-end TLS Proxy server listens.
# The default is 0, which means TLS is not used, even if certificates are configured below.
# tls_listen_port = 0

# tls_listen_address defines the ip on which Trickster's Front-end TLS Proxy server listens.
# empty by default, listening on all interfaces
# tls_listen_address = ''

# connections_limit defines the maximum number of concurrent connections
# Trickster's Proxy server may handle at any time.
# 0 by default, unlimited.
# connections_limit = 0

[caches]

    [caches.default]
    # cache_type defines what kind of cache Trickster uses
    # options are 'bbolt', 'badger', 'filesystem', 'memory', and 'redis'
    # The default is 'memory'.
    cache_type = 'memory'

    # compression determines whether the cache should be compressed. default is true
    # changing the compression setting will leave orphans in your cache for the duration of timeseries_ttl_secs
    compression = true

    # max_object_size_bytes defines the largest byte size an object may be before it is uncacheable due to size. default is 524288 (512k)
    max_object_size_bytes = 524288

        ### Configuration options for the Cache Index
        # The Cache Index handles key management and retention for bbolt, filesystem and memory
        # Redis and BadgerDB handle those functions natively and does not use the Trickster's Cache Index
        [caches.default.index]

        # reap_interval_secs defines how long the Cache Index reaper sleeps between reap cycles. Default is 3 (3s)
        reap_interval_secs = 3

        # flush_interval_secs sets how often the Cache Index saves its metadata to the cache from application memory. Default is 5 (5s)
        flush_interval_secs = 5

        # max_size_bytes indicates how large the cache can grow in bytes before the Index evicts least-recently-accessed items. default is 512MB
        max_size_bytes = 536870912

        # max_size_backoff_bytes indicates how far below max_size_bytes the cache size must be to complete a byte-size-based eviction exercise. default is 16MB
        max_size_backoff_bytes = 16777216

        # max_size_objects indicates how large the cache can grow in objects before the Index evicts least-recently-accessed items. default is 0 (infinite)
        max_size_objects = 0

        # max_size_backoff_objects indicates how far under max_size_objects the cache size must be to complete object-size-based eviction exercise. default is 100
        max_size_backoff_objects = 100

        ### Configuration options when using a Redis Cache
        [caches.default.redis]

        # client_type indicates which kind of Redis client to use. Options are: 'standard', 'cluster' and 'sentinel'
        # default is 'standard'
        client_type = 'standard'

        # Supported by Redis (standard)
        # These configurations are ignored by Redis Sentinel and Redis Cluster
        # protocol defines the protocol for connecting to redis ('unix' or 'tcp') 'tcp' is default
        protocol = 'tcp'
        # endpoint defines the fqdn+port or path to a unix socket file for connecting to redis
        # default is 'redis:6379'
        endpoint = 'redis:6379'
        #

        # Supported by Redis Cluster and Redis Sentinel
        # These conigurations are ignored by Redis (standard)
        # endpoints is used for Redis Cluster and Redis Sentinel to define a list of endpoints
        # default is ['redis:6379']
        endpoints = ['redis:6379']
        #

        # Supported by Redis Sentinel
        # These conigurations are ignored by Redis (standard) and Redis Cluster
        # sentinel_master should be set when using Redis Sentinel to indicate the Master Node
        sentinel_master = ''
        #

        # password provides the redis password
        # default is empty
        password = ''

        # These options are supported by all Redis Client Types
        # See the go-redis documentation at https://github.com/go-redis/redis/blob/master/options.go
        # for more information on tuning these settings

        # db is the Database to be selected after connecting to the server. default is 0
        # db = 0

        # max_retries is the maximum number of retries before giving up on the command
        # max_retries = 0

        # min_retry_backoff_ms is the minimum backoff time between each retry
        # min_retry_backoff_ms = 8

        # max_retry_backoff_ms is the maximum backoff time between each retry
        # max_retry_backoff_ms = 512

        # dial_timeout_ms is the timeout for establishing new connections
        # dial_timeout_ms = 5000

        # read_timeout_ms is the timeout for socket reads. If reached, commands will fail with a timeout instead of blocking.
        # read_timeout_ms = 3000

        # write_timeout_ms is the timeout for socket writes. If reached, commands will fail with a timeout instead of blocking.
        # write_timeout_ms = 3000

        # pool_size is the maximum number of socket connections.
        # pool_size = 20

        # min_idle_conns is the minimum number of idle connections which is useful when establishing new connection is slow.
        # min_idle_conns = 0

        # max_conn_age_ms is the connection age at which client retires (closes) the connection.
        # max_conn_age_ms = 0

        # pool_timeout_ms is the amount of time client waits for connection if all connections are busy before returning an error.
        # pool_timeout_ms = 4000

        # idle_timeout_ms is the amount of time after which client closes idle connections.
        # idle_timeout_ms = 300000

        # idle_check_frequency_ms is the frequency of idle checks made by idle connections reaper.
        # idle_check_frequency_ms = 60000


        ### Configuration options when using a Filesystem Cache
        [caches.default.filesystem]
        # cache_path defines the directory location under which the Trickster cache will be maintained
        # default is '/tmp/trickster'
        cache_path = '/tmp/trickster'

        ### Configuration options when using a bbolt Cache
        [caches.default.bbolt]

        # filename defines the file where the Trickster cache will be maintained
        # default is 'trickster.db'
        filename = 'trickster.db'

        # bucket defines the name of the BotlDb bucket (similar to a namespace) under which our key value store lives
        # default is 'trickster'
        bucket = 'trickster'

        ### Configuration options when using a Badger cache
        [caches.default.badger]
        # directory defines the directory location under which the Badger data will be maintained
        # default is '/tmp/trickster'
        directory = '/tmp/trickster'
        # value_directory defines the directory location under which the Badger value log will be maintained
        # default is '/tmp/trickster'
        value_directory = '/tmp/trickster'

    # Example of a second cache, sans comments, that origin configs below could use with: cache_name = 'bbolt_example'
    #
    # [caches.bbolt_example]
    # cache_type = 'bbolt'
    # compression = true
    # timeseries_ttl_secs = 21600
    # fastforward_ttl_secs = 15
    # object_ttl_secs = 30

        # [caches.bbolt_example.bbolt]
        # filename = 'trickster.db'
        # bucket = 'trickster'

        # [caches.bbolt_example.index]
        # reap_interval_secs = 3
        # flush_interval_secs = 5
        # max_size_bytes = 536870912
        # size_backoff_bytes = 16777216

# Configuration options for mapping Origin(s)
[origins]

    # example origin named default. default is always created with these settings unless a different origin is defined here.
    [origins.default]

    # is_default describes whether this origin is the default origin considered when routing http requests
    # it is false, by default; but if you only have a single origin configured, is_default will be true unless explicitly set to false
    is_default = true

    # origin_type identifies the origin type. Valid options are: 'prometheus', 'influxdb', 'irondb', 'reverseproxycache' (or just 'rpc')
    # origin_type is a required configuration value
    origin_type = '{{ trickster_origin_type }}'

    # cache_name identifies the name of the cache (configured above) that you want to use with this origin proxy.
    cache_name = 'default'

    # origin_url provides the base upstream URL for all proxied requests to this origin.
    # it can be as simple as http://example.com or as complex as https://example.com:8443/path/prefix
    # origin_url is a required configuration value
    origin_url = '{{ trickster_origin_url }}'

    # timeout_secs defines how many seconds Trickster will wait before aborting and upstream http request. Default: 180s
    # timeout_secs = 180

    # keep_alive_timeout_secs defines how long Trickster will wait before closing a keep-alive connection due to inactivity
    # if the origin's keep-alive timeout is shorter than Trickster's, the connect will be closed sooner. Default: 300
    # keep_alive_timeout_secs = 300

    # max_idle_conns set the maximum concurrent keep-alive connections Trickster may have opened to this origin
    # additional requests will be queued. Default: 20
    # max_idle_conns = 20

    # backfill_tolerance_secs prevents new datapoints that fall within the tolerance window (relative to time.Now) from being cached
    # Think of it as "never cache the newest N seconds of real-time data, because it may be preliminary and subject to updates"
    # default is 0
    # backfill_tolerance_secs = 0

    # timeseries_retention_factor defines the maximum number of recent timestamps to cache for a given query. Default is 1024
    # timeseries_retention_factor = 1024

    # timeseries_ttl_secs defines the relative expiration of cached timeseries. default is 6 hours (21600 seconds)
    # timeseries_ttl_secs = 21600

    # timeseries_eviction_method selects the metholodogy used to determine which timestamps are removed once
    # the timeseries_retention_factor limit is reached. options are 'oldest' and 'lru'. Default is 'oldest'
    # timeseries_eviction_method = 'oldest'

    # fast_forward_disable, when set to true, will turn off the 'fast forward' feature for any requests proxied to this origin
    # fast_forward_disable = false

    # fastforward_ttl_secs defines the relative expiration of cached fast forward data. default is 15s
    # fastforward_ttl_secs = 15

    # max_ttl_secs defines the maximum allowed TTL for any object cached for this origin. default is 86400
    # max_ttl_secs = 86400

    # revalidation_factor is the multiplier for object lifetime expiration to determine cache object TTL; default is 2
    # revalidation_factor = 2

        # the [origins.ORIGIN_NAME.tls] section configures the frontend and backend TLS operation for the origin
        # [origins.default.tls]

        # Frontend Configs
        # You can configure which certificate and key to use when this endpoint serves a downstream client
        # trickster will fail out at startup if the provided files do not exist, are unreadable, or in an invalid format
        # These settings by default are '' (empty string), which disables this origin from being routed over the TLS port
        #
        # full_chain_cert_path = '/path/to/your/cert.pem'
        # private_key_path = '/path/to/your/key.pem'

        # Backend Configs
        #
        # if insecure_skip_verify is true, trickster will trust the origins certificate without any verification
        # default is false
        # insecure_skip_verify = false
        #
        # certificate_authority_paths provides a list of additional certificate authorities to be used to trust an upstream origin
        # in addition to Operating System CA's.  default is an empty list, which insructs the trickster to use only the OS List
        # certificate_authority_paths = [ '../../testdata/test.rootca.pem' ]
        #
        # client_cert_path provides the path to a client certificate for Trickster to use when authenticating with an upstream server
        # empty string '' by default
        # client_cert_path = '/path/to/my/client/cert.pem'
        #
        # client_key_path provides the path to a client key for Trickster to use when authenticating with an upstream server
        # empty string '' by default
        # client_key_path = '/path/to/my/client/key.pem'

    # For multi-origin support, origins are named, and the name is the second word of the configuration section name.
    # In this example, an origin is named "foo".
    # Clients can indicate this origin in their path (http://trickster.example.com:9090/foo/api/v1/query_range?.....)
    # there are other ways for clients to indicate which origin to use in a multi-origin setup. See the documentation for more information

    # [origins.foo]
    # is_default = false
    # origin_type = 'influxdb'
    # origin_url = 'http://influx-origin:8086'
    # cache_name = 'bbolt_example'
    # scheme = 'http'
    # host = 'influx-origin:8086'
    # path_prefix = ''
    # timeseries_retention_factor = 1024
    # timeseries_eviction_method = 'oldest'
    # timeout_secs = 180
    # backfill_tolerance_secs = 180

# Configuration Options for Metrics Instrumentation
[metrics]
# listen_port defines the port that Trickster's metrics server listens on at /metrics
listen_port = 8082
# listen_address defines the ip that Trickster's metrics server listens on at /metrics
# empty by default, listening on all interfaces
# listen_address = ''

# Configuration Options for Logging Instrumentation
[logging]
# log_level defines the verbosity of the logger. Possible values are 'debug', 'info', 'warn', 'error'
# default is info
log_level = '{{trickster_log_level}}'

# log_file defines the file location to store logs. These will be auto-rolled and maintained for you.
# not specifying a log_file (this is the default behavior) will print logs to STDOUT
# log_file = '/var/log/trickster.log'
