---
trickster_release_download_url: https://github.com/tricksterproxy/trickster/releases


# https://github.com/trickstercache/trickster/releases/download/v1.1.5/trickster-1.1.5.tar.gz
# https://github.com/trickstercache/trickster/releases/download/v2.0.0-beta2/trickster-2.0.0-beta2.tar.gz

trickster_version: '2.0.0-beta2'

trickster_system_user: trickster
trickster_system_group: trickster

trickster_bin: /bin/trickster
trickster_config_file: /etc/trickster.yml

trickster_service_state: started

# listen_port defines the port on which Trickster's Proxy server listens.
# since this is a proxy for Prometheus, we use 9090 by default, just like Prometheus does
trickster_proxy_server_listen_port: 9090
# listen_port = 9090
# listen_address defines the ip on which Trickster's Proxy server listens.
# empty by default, listening on all interfaces
trickster_proxy_server_listen_address: '0.0.0.0'

# listen_port defines the port that Trickster's metrics server listens on at /metrics
trickster_metrics_listen_port: 8082
# listen_address defines the ip that Trickster's metrics server listens on at /metrics
# empty by default, listening on all interfaces
trickster_metrics_listen_address: '0.0.0.0'

# Possible values are 'debug', 'info', 'warn', 'error'
# default is info
trickster_log_level: info

# origin_url provides the base upstream URL for all proxied requests to this origin.
# it can be as simple as http://example.com or as complex as https://example.com:8443/path/prefix
# origin_url is a required configuration value
trickster_origin_url: 'http://127.0.0.1:9091'

# origin_type identifies the origin type.
# Valid options are: 'prometheus', 'influxdb', 'irondb', 'reverseproxycache' (or just 'rpc')
# origin_type is a required configuration value
trickster_origin_type: prometheus

trickster_main:
  # default is 0, which means ignored
  instance_id: 0
  # default is /trickster/config
  config_handler_path: /trickster/config
  # default is /trickster/ping
  ping_handler_path: /trickster/ping
  # default is /trickster/health
  health_handler_path: /trickster/health
  # Options are: "metrics", "reload", "both", or "off"; default is both
  pprof_server: both
  # server_name defaults to os.Hostname() when left blank
  server_name: ''

trickster_frontend:
  # # listen_port defines the port on which Tricksters Front-end HTTP Proxy server listens.
  listen_port: 8480
  # listen_address defines the ip on which Tricksters Front-end HTTP Proxy server listens.
  # empty by default, listening on all interfaces
  listen_address: ''
  # tls_listen_address defines the ip on which Tricksters Front-end TLS Proxy server listens.
  # empty by default, listening on all interfaces
  tls_listen_address: ''
  # tls_listen_port defines the port on which Tricksters Front-end TLS Proxy server listens.
  # The default is 0, which means TLS is not used, even if certificates are configured below.
  tls_listen_port: 0
  # connections_limit defines the maximum number of concurrent connections
  # Tricksters Proxy server may handle at any time.
  # 0 by default, unlimited.
  connections_limit: 0

trickster_caches:
  default:
    provider: memory
    # redis:
    #   endpoint: 'redis:6379'
    #   endpoints:
    #     - redis:6379
    #   protocol: tcp
    #   db: 0
    filesystem:
      cache_path: /tmp/trickster
    # bbolt:
    #   filename: trickster.db
    #   bucket: trickster
    # badger:
    #   directory: /tmp/trickster

trickster_backends:
  default:
    provider: prometheus
    is_default: true
    origin_type: prometheus
    origin_url: http://prometheus:9090

trickster_rules: {}

trickster_request_rewriters: {}

trickster_tracing: {}

trickster_metrics:
  listen_port: 8481
  listen_address: 127.0.0.1

trickster_reloading: {}

trickster_logging:
  log_level: warn
  log_file: /var/log/trickster.log


# options are 'bbolt', 'badger', 'filesystem', 'memory', and 'redis'
# The default is 'memory'.
trickster_cache_type: 'memory'

# client_type indicates which kind of Redis client to use. Options are: 'standard', 'cluster' and 'sentinel'
# default is 'standard'
trickster_cache_redis_client_type: 'standard'

# These configurations are ignored by Redis Sentinel and Redis Cluster
# protocol defines the protocol for connecting to redis ('unix' or 'tcp') 'tcp' is default
trickster_cache_redis_protocol: 'tcp'

# endpoint defines the fqdn+port or path to a unix socket file for connecting to redis
# default is 'redis:6379'
trickster_cache_redis_endpoint: '127.0.0.1:6379'

# Supported by Redis Cluster and Redis Sentinel
# These conigurations are ignored by Redis (standard)
# endpoints is used for Redis Cluster and Redis Sentinel to define a list of endpoints
trickster_cache_redis_endpoints: []
#  - 'redis1:6379'
#  - 'redis2:6379'

# These conigurations are ignored by Redis (standard) and Redis Cluster
# sentinel_master should be set when using Redis Sentinel to indicate the Master Node
trickster_cache_redis_sentinel_master: ''

# password provides the redis password
# default is empty
trickster_cache_redis_password: ''

# db is the Database to be selected after connecting to the server. default is 0
trickster_cache_redis_db: 0
